const path = require("path");

/** Header to be inserted at the top of every generated file */
const defaultFileHeader = `/**
 * This file was generated by the webpack build. Any
 * manual changes will overwritten by the next build
 */
`;

function ExtractPathListPlugin(options) {
    this.options = options;
}

ExtractPathListPlugin.prototype.apply = function(compiler) {
    const options = this.options;
    let chunkFileSets;

    compiler.plugin("compilation", function(compilation) {
        chunkFileSets = {};

        compilation.plugin("normal-module-loader", function(context, module) {
            context[__dirname] = function() {
                // Flag modules that should be included in the path list for it's chunk
                module[__dirname] = true;
            };
        });

        compilation.plugin('optimize-chunks', function(chunks) {
            // Find all modules marked for removal and collect a set of absolute paths for each chunk.
            for(var chunk of chunks) {
                chunkFileSets[chunk.name] = new Set();
                // Add flagged modules to the path list for the chunk
                chunk.forEachModule(function(m) {
                    if (m[__dirname]) {
                        chunkFileSets[chunk.name].add(m.resource);
                    }
                });
            }
        });
    });

    compiler.plugin('emit', function(compilation, callback) {
        const relativeTo = options.relativeTo || compiler.outputPath;
        const transform = options.transform || function (path) { return path; };
        const filename = options.filename || function (chunkName) { return `${chunkName}.paths.txt`; };

        for(var chunk of compilation.chunks) {
            if (chunkFileSets[chunk.name].size > 0) {
                const contents = defaultFileHeader + Array.from(chunkFileSets[chunk.name])
                    .map(function(resourcePath) {
                        return transform(path.relative(relativeTo, resourcePath), resourcePath);
                    })
                    .join("\n");

                compilation.assets[filename(chunk.name)] = {
                    source: function() {
                        return contents;
                    },
                    size: function() {
                        return contents.length;
                    }
                };
            }
        }

        callback();
    });
};

ExtractPathListPlugin.loader = {
    loader: path.join(__dirname, "./extract_paths_loader.js"),
    options: {
        omit: 0,
        remove: true
    }
};

module.exports = ExtractPathListPlugin;